type token =
  | IDENT of (string)
  | NUM of (int)
  | AST
  | PLUS
  | MINUS
  | MOD
  | SLASH
  | DOLLER
  | EQ
  | NEQ
  | SHL
  | SHR
  | LT
  | LE
  | IMP
  | GT
  | GE
  | TRUE
  | FALSE
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COMMA
  | COLON
  | ATMARK
  | DOLLAR
  | HASH
  | EXint
  | ALLint
  | EXnat
  | ALLnat
  | ARR
  | STR
  | STRINGPART
  | LS
  | EMP
  | AND
  | ANDAND
  | OR
  | NOT
  | PTO
  | VDASH
  | TILDE
  | BAND
  | BOR
  | BXOR
  | EOF

open Parsing;;
let _ = parse_error;;
# 6 "slsyntax_parser_entl.mly"
open Slsyntax
open Tools
let errstart = ref 0
let errend = ref 0
let errline = ref 1
let updatepos () =
  errstart := Parsing.symbol_start ();
  errend := Parsing.symbol_end ();
  errline := (Parsing.symbol_start_pos ()).pos_lnum
# 64 "slsyntax_parser_entl.ml"
let yytransl_const = [|
  259 (* AST *);
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* MOD *);
  263 (* SLASH *);
  264 (* DOLLER *);
  265 (* EQ *);
  266 (* NEQ *);
  267 (* SHL *);
  268 (* SHR *);
  269 (* LT *);
  270 (* LE *);
  271 (* IMP *);
  272 (* GT *);
  273 (* GE *);
  274 (* TRUE *);
  275 (* FALSE *);
  276 (* LPAREN *);
  277 (* RPAREN *);
  278 (* LBRACKET *);
  279 (* RBRACKET *);
  280 (* COMMA *);
  281 (* COLON *);
  282 (* ATMARK *);
  283 (* DOLLAR *);
  284 (* HASH *);
  285 (* EXint *);
  286 (* ALLint *);
  287 (* EXnat *);
  288 (* ALLnat *);
  289 (* ARR *);
  290 (* STR *);
  291 (* STRINGPART *);
  292 (* LS *);
  293 (* EMP *);
  294 (* AND *);
  295 (* ANDAND *);
  296 (* OR *);
  297 (* NOT *);
  298 (* PTO *);
  299 (* VDASH *);
  300 (* TILDE *);
  301 (* BAND *);
  302 (* BOR *);
  303 (* BXOR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* NUM *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\008\000\009\000\009\000\010\000\010\000\
\010\000\011\000\011\000\011\000\012\000\012\000\012\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\013\000\013\000\013\000\013\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\015\000\015\000\015\000\
\016\000\016\000\016\000\017\000\017\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\020\000\020\000\
\005\000\021\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\025\000\
\024\000\024\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\004\000\004\000\004\000\006\000\006\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\001\000\002\000\003\000\003\000\002\000\
\001\000\003\000\002\000\001\000\001\000\003\000\003\000\004\000\
\001\000\001\000\003\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\001\000\003\000\003\000\001\000\004\000\001\000\001\000\004\000\
\004\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\004\000\002\000\003\000\001\000\001\000\002\000\001\000\
\001\000\003\000\003\000\001\000\003\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\003\000\
\003\000\002\000\003\000\003\000\003\000\003\000\001\000\003\000\
\001\000\002\000\001\000\001\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\003\000\001\000\004\000\
\004\000\005\000\004\000\005\000\005\000\005\000\005\000\002\000\
\001\000\002\000\004\000\005\000\006\000\006\000\006\000\006\000\
\001\000\001\000\001\000\003\000\001\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\113\000\000\000\018\000\000\000\062\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\114\000\000\000\000\000\120\000\000\000\117\000\
\000\000\000\000\000\000\017\000\071\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\036\000\
\000\000\000\000\000\000\004\000\005\000\000\000\000\000\032\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\118\000\072\000\119\000\000\000\080\000\116\000\
\000\000\000\000\016\000\000\000\006\000\015\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\000\109\000\110\000\111\000\
\112\000\000\000\000\000\061\000"

let yydgoto = "\002\000\
\022\000\000\000\053\000\024\000\025\000\026\000\027\000\085\000\
\035\000\028\000\044\000\045\000\083\000\000\000\000\000\146\000\
\147\000\029\000\030\000\031\000\000\000\000\000\000\000\000\000\
\000\000\032\000"

let yysindex = "\020\000\
\089\255\000\000\000\000\066\255\000\000\214\001\000\000\000\000\
\170\001\024\255\002\255\002\255\002\255\002\255\020\255\021\255\
\032\255\034\255\000\000\170\001\214\001\000\000\036\000\000\000\
\243\254\029\255\074\000\000\000\000\000\044\255\000\000\081\255\
\020\001\094\255\071\255\214\001\141\255\051\000\064\255\101\255\
\101\255\002\255\127\255\000\000\150\001\150\001\150\001\150\001\
\214\001\214\001\214\001\214\001\096\000\000\000\141\255\214\001\
\216\001\214\001\214\001\214\001\214\001\214\001\214\001\214\001\
\214\001\214\001\214\001\214\001\114\255\214\001\214\001\214\001\
\170\001\009\255\170\001\089\255\000\000\170\001\009\255\000\000\
\020\001\223\255\015\255\000\000\000\000\094\255\083\000\000\000\
\000\000\071\255\071\255\072\255\101\255\003\255\254\254\254\254\
\254\254\254\254\141\000\156\000\166\000\193\000\141\255\214\001\
\104\255\104\255\141\255\141\255\223\255\223\255\187\000\187\000\
\223\255\223\255\223\255\223\255\202\001\223\255\223\255\223\255\
\254\254\178\255\000\000\000\000\000\000\254\254\000\000\000\000\
\083\000\111\255\000\000\214\001\000\000\000\000\071\255\000\000\
\214\001\214\001\214\001\214\001\141\255\008\255\118\255\000\000\
\223\255\124\255\131\255\000\000\223\255\203\000\215\000\252\000\
\007\001\214\001\214\001\207\001\000\000\000\000\000\000\000\000\
\000\000\223\255\223\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\153\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\255\000\000\001\000\
\000\000\000\000\198\255\000\000\002\002\000\000\000\000\000\000\
\054\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\120\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\243\255\086\001\000\000\000\000\000\000\241\254\060\255\
\067\255\108\255\000\000\000\000\000\000\000\000\082\002\000\000\
\242\002\026\003\122\002\162\002\062\255\214\000\046\003\066\003\
\250\000\023\001\030\001\145\001\000\000\086\003\106\003\126\003\
\240\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\255\000\000\000\000\000\000\000\000\000\000\118\001\000\000\
\000\000\000\000\000\000\000\000\202\002\111\000\000\000\000\000\
\152\255\150\255\000\000\000\000\197\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\218\255\241\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\255\255\189\255\067\000\099\000\000\000\093\000\
\231\255\000\000\086\000\005\000\113\000\000\000\000\000\000\000\
\050\000\000\000\000\000\138\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 1192
let yytable = "\023\000\
\115\000\073\000\041\000\041\000\037\000\076\000\123\000\038\000\
\003\000\004\000\005\000\128\000\073\000\006\000\090\000\091\000\
\046\000\047\000\048\000\055\000\001\000\042\000\076\000\076\000\
\040\000\074\000\075\000\033\000\036\000\043\000\043\000\082\000\
\154\000\034\000\087\000\131\000\010\000\075\000\132\000\049\000\
\050\000\015\000\016\000\017\000\018\000\019\000\092\000\099\000\
\100\000\101\000\102\000\051\000\021\000\052\000\103\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\135\000\118\000\119\000\120\000\076\000\
\122\000\077\000\023\000\039\000\064\000\122\000\073\000\129\000\
\075\000\078\000\064\000\079\000\089\000\033\000\054\000\078\000\
\003\000\004\000\005\000\034\000\134\000\006\000\084\000\094\000\
\086\000\075\000\075\000\064\000\064\000\064\000\141\000\075\000\
\078\000\078\000\007\000\008\000\009\000\059\000\060\000\095\000\
\096\000\097\000\098\000\145\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\034\000\093\000\
\077\000\020\000\149\000\148\000\021\000\117\000\132\000\150\000\
\151\000\152\000\153\000\121\000\033\000\124\000\155\000\033\000\
\126\000\077\000\077\000\156\000\070\000\071\000\072\000\157\000\
\162\000\163\000\145\000\009\000\009\000\009\000\009\000\009\000\
\033\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\060\000\079\000\057\000\009\000\125\000\057\000\
\009\000\079\000\133\000\136\000\056\000\057\000\058\000\059\000\
\060\000\070\000\071\000\072\000\063\000\064\000\009\000\009\000\
\009\000\130\000\009\000\079\000\079\000\009\000\009\000\009\000\
\008\000\008\000\008\000\008\000\008\000\164\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\127\000\
\000\000\034\000\008\000\069\000\034\000\008\000\070\000\071\000\
\072\000\056\000\057\000\058\000\059\000\060\000\000\000\000\000\
\000\000\063\000\064\000\008\000\008\000\008\000\059\000\008\000\
\000\000\059\000\008\000\008\000\008\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\073\000\058\000\000\000\007\000\
\058\000\000\000\007\000\070\000\071\000\072\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\073\000\073\000\000\000\
\007\000\007\000\007\000\000\000\007\000\000\000\000\000\007\000\
\007\000\007\000\000\000\000\000\000\000\000\000\056\000\057\000\
\058\000\059\000\060\000\115\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\068\000\056\000\057\000\058\000\
\059\000\060\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\067\000\068\000\000\000\000\000\000\000\088\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\070\000\071\000\072\000\000\000\000\000\056\000\057\000\058\000\
\059\000\060\000\000\000\000\000\000\000\063\000\064\000\070\000\
\071\000\072\000\056\000\057\000\058\000\059\000\060\000\088\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\067\000\
\068\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\000\000\009\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\056\000\
\057\000\058\000\059\000\060\000\000\000\000\000\000\000\063\000\
\064\000\000\000\000\000\009\000\009\000\009\000\056\000\057\000\
\058\000\059\000\060\000\000\000\137\000\000\000\063\000\064\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\000\000\
\063\000\064\000\000\000\138\000\000\000\000\000\000\000\000\000\
\000\000\070\000\071\000\072\000\000\000\139\000\057\000\058\000\
\059\000\060\000\000\000\056\000\057\000\058\000\059\000\060\000\
\070\000\071\000\072\000\063\000\064\000\056\000\057\000\058\000\
\059\000\060\000\070\000\071\000\072\000\063\000\064\000\000\000\
\140\000\056\000\057\000\058\000\059\000\060\000\000\000\158\000\
\000\000\063\000\064\000\000\000\065\000\000\000\000\000\070\000\
\071\000\072\000\065\000\159\000\000\000\070\000\071\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\000\000\065\000\065\000\065\000\056\000\057\000\
\058\000\059\000\060\000\070\000\071\000\072\000\063\000\064\000\
\066\000\056\000\057\000\058\000\059\000\060\000\066\000\000\000\
\160\000\063\000\064\000\080\000\004\000\005\000\000\000\000\000\
\006\000\000\000\000\000\161\000\000\000\000\000\000\000\066\000\
\066\000\066\000\000\000\000\000\000\000\067\000\000\000\081\000\
\070\000\071\000\072\000\067\000\068\000\000\000\000\000\010\000\
\000\000\000\000\068\000\070\000\071\000\072\000\012\000\012\000\
\000\000\000\000\012\000\000\000\067\000\067\000\067\000\021\000\
\000\000\000\000\000\000\068\000\068\000\068\000\000\000\012\000\
\012\000\012\000\012\000\000\000\000\000\012\000\000\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\011\000\011\000\
\000\000\000\000\011\000\000\000\000\000\000\000\012\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\000\000\000\000\
\000\000\011\000\011\000\011\000\011\000\011\000\010\000\010\000\
\000\000\000\000\010\000\000\000\000\000\000\000\011\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\010\000\
\010\000\010\000\010\000\000\000\000\000\010\000\000\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\004\000\005\000\
\000\000\000\000\006\000\000\000\000\000\000\000\010\000\069\000\
\000\000\010\000\000\000\000\000\000\000\069\000\000\000\007\000\
\008\000\009\000\004\000\005\000\000\000\094\000\006\000\000\000\
\000\000\010\000\011\000\012\000\013\000\014\000\069\000\069\000\
\069\000\000\000\000\000\007\000\008\000\009\000\020\000\000\000\
\000\000\021\000\000\000\000\000\000\000\010\000\011\000\012\000\
\013\000\014\000\142\000\005\000\143\000\000\000\006\000\142\000\
\005\000\143\000\020\000\006\000\000\000\021\000\004\000\005\000\
\004\000\005\000\006\000\000\000\104\000\036\000\144\000\000\000\
\000\000\000\000\036\000\000\000\000\000\010\000\000\000\000\000\
\000\000\036\000\010\000\036\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\010\000\000\000\021\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\021\000\031\000\031\000\031\000\031\000\
\031\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\000\000\000\000\000\000\031\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\031\000\031\000\000\000\031\000\030\000\030\000\030\000\030\000\
\030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\000\000\000\000\000\000\030\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\030\000\030\000\000\000\030\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\000\000\000\000\023\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\023\000\000\000\023\000\022\000\022\000\022\000\022\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\000\000\000\000\022\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\022\000\000\000\022\000\024\000\024\000\024\000\024\000\
\024\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\000\000\000\000\024\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\024\000\024\000\000\000\024\000\020\000\020\000\020\000\031\000\
\031\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\000\000\000\000\000\000\020\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\020\000\020\000\000\000\020\000\019\000\019\000\019\000\000\000\
\000\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\000\000\000\000\019\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\019\000\019\000\000\000\019\000\021\000\021\000\021\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\000\000\000\000\000\000\021\000\000\000\
\026\000\021\000\000\000\000\000\000\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\021\000\
\021\000\021\000\026\000\021\000\025\000\026\000\000\000\000\000\
\000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\026\000\026\000\026\000\025\000\026\000\
\000\000\025\000\000\000\000\000\000\000\000\000\027\000\027\000\
\000\000\000\000\027\000\027\000\027\000\027\000\027\000\025\000\
\025\000\025\000\027\000\025\000\000\000\027\000\000\000\000\000\
\000\000\000\000\028\000\028\000\000\000\000\000\028\000\028\000\
\028\000\028\000\028\000\027\000\027\000\027\000\028\000\027\000\
\000\000\028\000\000\000\000\000\000\000\000\000\029\000\029\000\
\000\000\000\000\029\000\029\000\029\000\029\000\029\000\028\000\
\028\000\028\000\029\000\028\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\029\000\029\000\000\000\029\000"

let yycheck = "\001\000\
\000\000\015\001\001\001\001\001\006\000\021\001\074\000\009\000\
\000\001\001\001\002\001\079\000\015\001\005\001\040\000\041\000\
\012\000\013\000\014\000\021\000\001\000\020\001\038\001\039\001\
\001\001\039\001\040\001\020\001\020\001\028\001\028\001\033\000\
\025\001\026\001\036\000\021\001\028\001\040\001\024\001\020\001\
\020\001\033\001\034\001\035\001\036\001\037\001\042\000\049\000\
\050\000\051\000\052\000\020\001\044\001\020\001\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\093\000\070\000\071\000\072\000\043\001\
\074\000\000\000\076\000\009\000\015\001\079\000\015\001\081\000\
\021\001\038\001\021\001\003\001\021\001\020\001\020\000\021\001\
\000\001\001\001\002\001\026\001\021\001\005\001\001\001\024\001\
\026\001\038\001\039\001\038\001\039\001\040\001\104\000\040\001\
\038\001\039\001\018\001\019\001\020\001\006\001\007\001\045\000\
\046\000\047\000\048\000\117\000\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\026\001\001\001\
\021\001\041\001\132\000\021\001\044\001\020\001\024\001\137\000\
\138\000\139\000\140\000\073\000\021\001\075\000\025\001\024\001\
\078\000\038\001\039\001\024\001\045\001\046\001\047\001\021\001\
\154\000\155\000\156\000\003\001\004\001\005\001\006\001\007\001\
\024\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\021\001\015\001\021\001\021\001\076\000\024\001\
\024\001\021\001\086\000\094\000\003\001\004\001\005\001\006\001\
\007\001\045\001\046\001\047\001\011\001\012\001\038\001\039\001\
\040\001\081\000\042\001\039\001\040\001\045\001\046\001\047\001\
\003\001\004\001\005\001\006\001\007\001\156\000\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\078\000\
\255\255\021\001\021\001\042\001\024\001\024\001\045\001\046\001\
\047\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\011\001\012\001\038\001\039\001\040\001\021\001\042\001\
\255\255\024\001\045\001\046\001\047\001\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\021\001\021\001\255\255\021\001\
\024\001\255\255\024\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\255\255\
\038\001\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\003\001\004\001\
\005\001\006\001\007\001\043\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\003\001\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\045\001\046\001\047\001\255\255\255\255\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\045\001\
\046\001\047\001\003\001\004\001\005\001\006\001\007\001\021\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\011\001\012\001\255\255\255\255\255\255\255\255\045\001\
\046\001\047\001\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\045\001\046\001\047\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\255\255\011\001\
\012\001\255\255\255\255\045\001\046\001\047\001\003\001\004\001\
\005\001\006\001\007\001\255\255\024\001\255\255\011\001\012\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\011\001\012\001\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\045\001\046\001\047\001\255\255\024\001\004\001\005\001\
\006\001\007\001\255\255\003\001\004\001\005\001\006\001\007\001\
\045\001\046\001\047\001\011\001\012\001\003\001\004\001\005\001\
\006\001\007\001\045\001\046\001\047\001\011\001\012\001\255\255\
\024\001\003\001\004\001\005\001\006\001\007\001\255\255\021\001\
\255\255\011\001\012\001\255\255\015\001\255\255\255\255\045\001\
\046\001\047\001\021\001\021\001\255\255\045\001\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\046\001\047\001\255\255\038\001\039\001\040\001\003\001\004\001\
\005\001\006\001\007\001\045\001\046\001\047\001\011\001\012\001\
\015\001\003\001\004\001\005\001\006\001\007\001\021\001\255\255\
\021\001\011\001\012\001\000\001\001\001\002\001\255\255\255\255\
\005\001\255\255\255\255\021\001\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\255\255\255\255\015\001\255\255\020\001\
\045\001\046\001\047\001\021\001\015\001\255\255\255\255\028\001\
\255\255\255\255\021\001\045\001\046\001\047\001\001\001\002\001\
\255\255\255\255\005\001\255\255\038\001\039\001\040\001\044\001\
\255\255\255\255\255\255\038\001\039\001\040\001\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\001\001\002\001\
\255\255\255\255\005\001\255\255\255\255\255\255\041\001\255\255\
\255\255\044\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\001\001\002\001\
\255\255\255\255\005\001\255\255\255\255\255\255\041\001\255\255\
\255\255\044\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\001\001\002\001\
\255\255\255\255\005\001\255\255\255\255\255\255\041\001\015\001\
\255\255\044\001\255\255\255\255\255\255\021\001\255\255\018\001\
\019\001\020\001\001\001\002\001\255\255\024\001\005\001\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\038\001\039\001\
\040\001\255\255\255\255\018\001\019\001\020\001\041\001\255\255\
\255\255\044\001\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\255\255\005\001\001\001\
\002\001\003\001\041\001\005\001\255\255\044\001\001\001\002\001\
\001\001\002\001\005\001\255\255\005\001\020\001\021\001\255\255\
\255\255\255\255\020\001\255\255\255\255\028\001\255\255\255\255\
\255\255\020\001\028\001\020\001\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\028\001\255\255\044\001\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\044\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\003\001\024\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\038\001\
\039\001\040\001\021\001\042\001\003\001\024\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\038\001\039\001\040\001\021\001\042\001\
\255\255\024\001\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\038\001\
\039\001\040\001\021\001\042\001\255\255\024\001\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\038\001\039\001\040\001\021\001\042\001\
\255\255\024\001\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\038\001\
\039\001\040\001\021\001\042\001\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\255\255\042\001"

let yynames_const = "\
  AST\000\
  PLUS\000\
  MINUS\000\
  MOD\000\
  SLASH\000\
  DOLLER\000\
  EQ\000\
  NEQ\000\
  SHL\000\
  SHR\000\
  LT\000\
  LE\000\
  IMP\000\
  GT\000\
  GE\000\
  TRUE\000\
  FALSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  COLON\000\
  ATMARK\000\
  DOLLAR\000\
  HASH\000\
  EXint\000\
  ALLint\000\
  EXnat\000\
  ALLnat\000\
  ARR\000\
  STR\000\
  STRINGPART\000\
  LS\000\
  EMP\000\
  AND\000\
  ANDAND\000\
  OR\000\
  NOT\000\
  PTO\000\
  VDASH\000\
  TILDE\000\
  BAND\000\
  BOR\000\
  BXOR\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  NUM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'entl) in
    Obj.repr(
# 105 "slsyntax_parser_entl.mly"
     ( _1 )
# 598 "slsyntax_parser_entl.ml"
               : Slsyntax.QFEntl.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "slsyntax_parser_entl.mly"
      ( [_1] )
# 605 "slsyntax_parser_entl.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    Obj.repr(
# 112 "slsyntax_parser_entl.mly"
   ( _2 )
# 612 "slsyntax_parser_entl.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "slsyntax_parser_entl.mly"
      (
        match _1 with
        | "PTR" | "ptr" -> Attr.PTR
        | "EXQ" | "exq" -> Attr.EXQ
        | "PARAM" | "param" -> Attr.PARAM
        | "PTRPTR" | "ptrptr" -> Attr.PTRPTR
        | "GLOBAL" | "global" -> Attr.GLOBAL
        | "HAT" | "hat" -> Attr.HAT
        | "BAR" | "bar" -> Attr.BAR
        | "EXTERN" | "extern" -> Attr.EXTERN
        | "TILDE" | "tilde" -> Attr.TILDE
        | "CHECK" | "check" -> Attr.CHECK
        | "DOT" | "dot" -> Attr.DOT
        | "NESTED" | "nested" -> Attr.NESTED
        | "QUESTION" | "question" -> Attr.QUESTION
        | "DOTDOT" | "dotdot" -> Attr.DOTDOT
        | "AQUTE" | "acute" -> Attr.ACUTE
        | "INDIRECT" | "indirect" -> Attr.INDIRECT
        | "PROTO" | "proto" -> Attr.PROTO
        | "ARRAY" | "array" -> Attr.ARRAY [1] 
        | _ -> Attr.STRUCT _1
      )
# 640 "slsyntax_parser_entl.ml"
               : 'var_attriv_one))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv_one) in
    Obj.repr(
# 143 "slsyntax_parser_entl.mly"
      ( Attrs.singleton _2 )
# 647 "slsyntax_parser_entl.ml"
               : 'var_attriv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_attriv) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv_one) in
    Obj.repr(
# 145 "slsyntax_parser_entl.mly"
      ( Attrs.add _3 _1 )
# 655 "slsyntax_parser_entl.ml"
               : 'var_attriv))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv) in
    Obj.repr(
# 150 "slsyntax_parser_entl.mly"
      ( SHterm.Var ("#"^_2,_3) )
# 663 "slsyntax_parser_entl.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv) in
    Obj.repr(
# 152 "slsyntax_parser_entl.mly"
      ( SHterm.Var (_1,_2) )
# 671 "slsyntax_parser_entl.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 154 "slsyntax_parser_entl.mly"
      ( SHterm.Var (_1,Attrs.empty) )
# 678 "slsyntax_parser_entl.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv) in
    Obj.repr(
# 159 "slsyntax_parser_entl.mly"
      ( "#"^_2 )
# 686 "slsyntax_parser_entl.ml"
               : 'bvariable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_attriv) in
    Obj.repr(
# 161 "slsyntax_parser_entl.mly"
      ( _1 )
# 694 "slsyntax_parser_entl.ml"
               : 'bvariable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "slsyntax_parser_entl.mly"
      ( _1 )
# 701 "slsyntax_parser_entl.ml"
               : 'bvariable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bvariable) in
    Obj.repr(
# 168 "slsyntax_parser_entl.mly"
      ( Strset.singleton _1 )
# 708 "slsyntax_parser_entl.ml"
               : 'bvariable_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bvariable_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bvariable) in
    Obj.repr(
# 170 "slsyntax_parser_entl.mly"
      ( Strset.add _3 _1 )
# 716 "slsyntax_parser_entl.ml"
               : 'bvariable_seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bvariable_seq) in
    Obj.repr(
# 172 "slsyntax_parser_entl.mly"
   ( _2 )
# 723 "slsyntax_parser_entl.ml"
               : 'bvariable_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term_seq) in
    Obj.repr(
# 177 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Fcall (_1,_3) )
# 731 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 179 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 )
# 738 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 181 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Int _1 )
# 745 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 183 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Add [_1;_3] )
# 753 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 185 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Sub [_1;_4] )
# 761 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 187 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Sub [_1;_3] )
# 769 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 189 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Mod (_1,_3) )
# 777 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 191 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Mul (_1,_3) )
# 785 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 193 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Div (_1,_3) )
# 793 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 195 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Shr (_1,_3) )
# 801 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 197 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Shl (_1,_3) )
# 809 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 199 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Band (_1,_3) )
# 817 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 201 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Bor (_1,_3) )
# 825 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 203 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Bxor (_1,_3) )
# 833 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 205 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Bnot _2 )
# 840 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 207 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Sub [SHterm.Int 0;_2] )
# 847 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 209 "slsyntax_parser_entl.mly"
      ( updatepos (); _2 )
# 854 "slsyntax_parser_entl.ml"
               : SHterm.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 214 "slsyntax_parser_entl.mly"
      ( updatepos (); [_1] )
# 861 "slsyntax_parser_entl.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 216 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 @ [_3] )
# 869 "slsyntax_parser_entl.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term_seq) in
    Obj.repr(
# 218 "slsyntax_parser_entl.mly"
   ( updatepos (); _2 )
# 876 "slsyntax_parser_entl.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "slsyntax_parser_entl.mly"
      (
        Format.printf "@[Here is term_seq@.";
        raise Parsing.Parse_error
      )
# 885 "slsyntax_parser_entl.ml"
               : 'term_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termpf_seq) in
    Obj.repr(
# 228 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Fcall (_1,_3) )
# 893 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 230 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 )
# 900 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 232 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Int _1 )
# 907 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termpf_seq) in
    Obj.repr(
# 234 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Add _3 )
# 914 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termpf_seq) in
    Obj.repr(
# 236 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Sub _3 )
# 921 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 238 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Mod (_3,_4) )
# 929 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 240 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Mul (_3,_4) )
# 937 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 242 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Div (_3,_4) )
# 945 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 244 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Shr (_3,_4) )
# 953 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 246 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Shl (_3,_4) )
# 961 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 248 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Band (_3,_4) )
# 969 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 250 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Bor (_3,_4) )
# 977 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 252 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Bxor (_3,_4) )
# 985 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 254 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Bnot _3 )
# 992 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'termpf) in
    Obj.repr(
# 256 "slsyntax_parser_entl.mly"
      ( updatepos (); SHterm.Sub [SHterm.Int 0;_2] )
# 999 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 258 "slsyntax_parser_entl.mly"
      ( updatepos (); _2 )
# 1006 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "slsyntax_parser_entl.mly"
      (
        Format.printf "@[Here is termpf@.";
        raise Parsing.Parse_error
      )
# 1015 "slsyntax_parser_entl.ml"
               : 'termpf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'termpf) in
    Obj.repr(
# 268 "slsyntax_parser_entl.mly"
      ( updatepos (); [_1] )
# 1022 "slsyntax_parser_entl.ml"
               : 'termpf_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'termpf_seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'termpf) in
    Obj.repr(
# 270 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 @ [_2] )
# 1030 "slsyntax_parser_entl.ml"
               : 'termpf_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 272 "slsyntax_parser_entl.mly"
      (
        Format.printf "@[Here is termpf_seq@.";
        raise Parsing.Parse_error
      )
# 1039 "slsyntax_parser_entl.ml"
               : 'termpf_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 280 "slsyntax_parser_entl.mly"
      ( updatepos (); ("",_1) )
# 1046 "slsyntax_parser_entl.ml"
               : 'fieldterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 282 "slsyntax_parser_entl.mly"
      ( updatepos (); ("*",_3) )
# 1053 "slsyntax_parser_entl.ml"
               : 'fieldterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 284 "slsyntax_parser_entl.mly"
      ( updatepos (); (_1,_3) )
# 1061 "slsyntax_parser_entl.ml"
               : 'fieldterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldterm) in
    Obj.repr(
# 289 "slsyntax_parser_entl.mly"
      ( updatepos (); [_1] )
# 1068 "slsyntax_parser_entl.ml"
               : 'fieldterm_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldterm_seq) in
    Obj.repr(
# 291 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 :: _3 )
# 1076 "slsyntax_parser_entl.ml"
               : 'fieldterm_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 296 "slsyntax_parser_entl.mly"
      ( updatepos (); P.True )
# 1082 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 298 "slsyntax_parser_entl.mly"
      ( updatepos (); P.False )
# 1088 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 300 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Eq,[_1;_3]) )
# 1096 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 302 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Neq,[_1;_3]) )
# 1104 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 304 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Lt,[_1;_3]) )
# 1112 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 306 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Le,[_1;_3]) )
# 1120 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 308 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Lt,[_3;_1]) )
# 1128 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHterm.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHterm.t) in
    Obj.repr(
# 310 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Le,[_3;_1]) )
# 1136 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : SHpure.t) in
    Obj.repr(
# 312 "slsyntax_parser_entl.mly"
      ( updatepos (); _2 )
# 1143 "slsyntax_parser_entl.ml"
               : 'pure_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_atom) in
    Obj.repr(
# 317 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 )
# 1150 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHpure.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 319 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Or [_1;_3] )
# 1158 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHpure.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 321 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Imp (_1,_3) )
# 1166 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 323 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Neg _2)
# 1173 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bvariable_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 325 "slsyntax_parser_entl.mly"
      ( updatepos (); P.All(P.Int,_2,_3) )
# 1181 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bvariable_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 327 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Ex(P.Int,_2,_3) )
# 1189 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bvariable_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 329 "slsyntax_parser_entl.mly"
      ( updatepos (); P.All(P.Nat,_2,_3) )
# 1197 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bvariable_seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHpure.t) in
    Obj.repr(
# 331 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Ex(P.Nat,_2,_3) )
# 1205 "slsyntax_parser_entl.ml"
               : 'pure_fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_fact) in
    Obj.repr(
# 336 "slsyntax_parser_entl.mly"
      ( updatepos (); [_1] )
# 1212 "slsyntax_parser_entl.ml"
               : 'pure_fact_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_fact) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_fact_seq) in
    Obj.repr(
# 338 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 :: _3 )
# 1220 "slsyntax_parser_entl.ml"
               : 'pure_fact_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_fact_seq) in
    Obj.repr(
# 343 "slsyntax_parser_entl.mly"
      (
        match _1 with
        | [] -> P.True
        | [p] -> p
        | pp -> P.And pp
      )
# 1232 "slsyntax_parser_entl.ml"
               : SHpure.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : SHpure.t) in
    Obj.repr(
# 353 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 )
# 1239 "slsyntax_parser_entl.ml"
               : 'pure_last))
; (fun __caml_parser_env ->
    Obj.repr(
# 358 "slsyntax_parser_entl.mly"
      ( updatepos (); P.True )
# 1245 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 360 "slsyntax_parser_entl.mly"
      ( updatepos (); P.False )
# 1251 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 362 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Eq,[_3;_4]) )
# 1259 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 364 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Eq,[_3;_4]) )
# 1267 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 366 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Neq,[_3;_4]) )
# 1275 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 368 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Neq,[_3;_4]) )
# 1283 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 370 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Neq,[_3;_4]) )
# 1291 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 372 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Lt,[_3;_4]) )
# 1299 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 374 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Le,[_3;_4]) )
# 1307 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 376 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Lt,[_4;_3]) )
# 1315 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'termpf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termpf) in
    Obj.repr(
# 378 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Atom(P.Le,[_4;_3]) )
# 1323 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 380 "slsyntax_parser_entl.mly"
      ( updatepos (); _2 )
# 1330 "slsyntax_parser_entl.ml"
               : 'purepf_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'purepf_atom) in
    Obj.repr(
# 385 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 )
# 1337 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'purepf_seq) in
    Obj.repr(
# 387 "slsyntax_parser_entl.mly"
      ( updatepos (); P.And _3 )
# 1344 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'purepf_seq) in
    Obj.repr(
# 389 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Or _3 )
# 1351 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'purepf) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 391 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Imp (_3,_4) )
# 1359 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 393 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Neg _3 )
# 1366 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bvariable_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 395 "slsyntax_parser_entl.mly"
      ( updatepos (); P.All(P.Int,_3,_4) )
# 1374 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bvariable_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 397 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Ex(P.Int,_3,_4) )
# 1382 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bvariable_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 399 "slsyntax_parser_entl.mly"
      ( updatepos (); P.All(P.Nat,_3,_4) )
# 1390 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bvariable_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 401 "slsyntax_parser_entl.mly"
      ( updatepos (); P.Ex(P.Nat,_3,_4) )
# 1398 "slsyntax_parser_entl.ml"
               : 'purepf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'purepf) in
    Obj.repr(
# 406 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 )
# 1405 "slsyntax_parser_entl.ml"
               : 'purepf_and))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'purepf) in
    Obj.repr(
# 411 "slsyntax_parser_entl.mly"
      ( updatepos (); [_1] )
# 1412 "slsyntax_parser_entl.ml"
               : 'purepf_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'purepf_seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'purepf) in
    Obj.repr(
# 413 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 @ [_2] )
# 1420 "slsyntax_parser_entl.ml"
               : 'purepf_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    Obj.repr(
# 418 "slsyntax_parser_entl.mly"
      ( updatepos (); S.Pto(_1,[]) )
# 1427 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : SHterm.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fieldterm_seq) in
    Obj.repr(
# 420 "slsyntax_parser_entl.mly"
      ( updatepos (); S.Pto(_1,_4) )
# 1435 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 422 "slsyntax_parser_entl.mly"
      ( updatepos (); S.Arr(_3,_5) )
# 1443 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 424 "slsyntax_parser_entl.mly"
      ( updatepos (); S.Str(_3,_5) )
# 1451 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 426 "slsyntax_parser_entl.mly"
      ( updatepos (); S.Str(_3,_5) )
# 1459 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : SHterm.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : SHterm.t) in
    Obj.repr(
# 428 "slsyntax_parser_entl.mly"
      ( updatepos (); S.Ind("Ls",[_3;_5]) )
# 1467 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "slsyntax_parser_entl.mly"
      ( raise (ParseError (!errstart,!errend,!errline)) )
# 1473 "slsyntax_parser_entl.ml"
               : 'spat_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "slsyntax_parser_entl.mly"
      ( updatepos (); [] )
# 1479 "slsyntax_parser_entl.ml"
               : SHspat.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'spat_atom) in
    Obj.repr(
# 437 "slsyntax_parser_entl.mly"
      ( updatepos (); [_1] )
# 1486 "slsyntax_parser_entl.ml"
               : SHspat.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'spat_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHspat.t) in
    Obj.repr(
# 439 "slsyntax_parser_entl.mly"
      ( updatepos (); _1 :: _3 )
# 1494 "slsyntax_parser_entl.ml"
               : SHspat.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : SHspat.t) in
    Obj.repr(
# 444 "slsyntax_parser_entl.mly"
      ( updatepos (); (P.True,_1) )
# 1501 "slsyntax_parser_entl.ml"
               : QFSH.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : SHpure.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : SHspat.t) in
    Obj.repr(
# 446 "slsyntax_parser_entl.mly"
      ( updatepos (); (_1,_3) )
# 1509 "slsyntax_parser_entl.ml"
               : QFSH.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : QFSH.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : QFSH.t) in
    Obj.repr(
# 451 "slsyntax_parser_entl.mly"
    ( updatepos (); (_1,[_3])  )
# 1517 "slsyntax_parser_entl.ml"
               : 'entl))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Slsyntax.QFEntl.t)
